services:
  customerdb:
    container_name: memberdb
    restart: always
    environment:
      POSTGRES_DB: Memberdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - membership-net
    volumes:
      - postgres_customer:/var/lib/postgresql/data

  ###########################
  # Discovery configuration #
  ###########################  
  consul:
    image: consul:1.15.4  # Imagen oficial de Consul
    container_name: consul-server
    restart: always
    ports:
      - "8500:8500"      # Puerto para la interfaz web y API HTTP
      - "8600:8600/udp"  # Puerto para consultas DNS
    networks:
      - membership-net
    environment:
      - CONSUL_BIND_INTERFACE=eth0  # Configuración de la interfaz de red
    command: agent -dev -client=0.0.0.0
    volumes:
      - consul_data:/consul/data     # Persistencia de datos de Consul (opcional)
      - consul_config:/consul/config # Opcional para archivos de configuración
  ###############################
  # Discovery configuration end #
  ###############################
  
  vault:
    container_name: vault
    restart: always
    command: [ 'vault', 'server', '-dev', '-dev-listen-address=0.0.0.0:8200' ]
    environment:
      VAULT_ADDR: "http://vault:8200"
      # in production scenarios the token mechanisim for loggin will be forbidden,
      # in production scenarios the token mechanisim for loggin will be forbidden,
      # it cannot be in source control.
      VAULT_DEV_ROOT_TOKEN_ID: "p8ItnHqR5SXlAb8EzXaGSDqp"
      VAULT_TOKEN: "p8ItnHqR5SXlAb8EzXaGSDqp"
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - membership-net
    volumes:
      - vault_file:/vault/file
      - vault_logs:/vault/logs
  
  #########################
  # Graylog configuration #
  #########################
  # MongoDB: https://hub.docker.com/_/mongo/
  mongodb:
    container_name: mongo_graylog
    ports:
      - "27017:27017"
    restart: "on-failure"
    networks:
      - membership-net
    volumes:
      - "mongodb_data:/data/db"
      - "mongodb_config:/data/configdb"
  
  #Graylog Data Node: https://hub.docker.com/r/graylog/graylog-datanode
  datanode:
    container_name: datanode_graylog
    hostname: "datanode"
    environment:
      GRAYLOG_DATANODE_NODE_ID_FILE: "/var/lib/graylog-datanode/node-id"
      GRAYLOG_DATANODE_PASSWORD_SECRET: "somepasswordpepper"
      GRAYLOG_DATANODE_ROOT_PASSWORD_SHA2: "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
      GRAYLOG_DATANODE_MONGODB_URI: "mongodb://mongodb:27017/graylog"
    ulimits:
      memlock:
        hard: -1
        soft: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "8999:8999/tcp" # DataNode API
      - "9200:9200/tcp"
      - "9300:9300/tcp"
    networks:
      - membership-net
    volumes:
      - "graylog-datanode:/var/lib/graylog-datanode"
    restart: "on-failure"
  
  # Graylog: https://hub.docker.com/r/graylog/graylog/
  graylog:
    hostname: "server"
    container_name: graylog
    # To install Graylog Open: "graylog/graylog:6.1"
    depends_on:
      mongodb:
        condition: "service_started"
      datanode:
        condition: "service_started"
    entrypoint: "/usr/bin/tini -- /docker-entrypoint.sh"
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_GELF_UDP_BIND_ADDRESS: "0.0.0.0"
      GRAYLOG_GELF_TCP_BIND_ADDRESS: "0.0.0.0"
      GRAYLOG_MONGODB_URI: "mongodb://mongodb:27017/graylog"
      # To make reporting (headless_shell) work inside a Docker container
      GRAYLOG_REPORT_DISABLE_SANDBOX: "true"
      # CHANGE ME (must be at least 16 characters)!
      GRAYLOG_PASSWORD_SECRET: "somepasswordpepper"
      # Password: "admin"
      GRAYLOG_ROOT_PASSWORD_SHA2: "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://127.0.0.1:9000/"
    ports:
      # Graylog web interface and REST API
      - "9000:9000/tcp"
      # Beats
      - "5044:5044/tcp"
      # Syslog TCP
      - "5140:5140/tcp"
      # Syslog UDP
      - "5140:5140/udp"
      # GELF TCP
      - "12201:12201/tcp"
      # GELF UDP
      - "12201:12201/udp"
      # Forwarder data
      - "13301:13301/tcp"
      # Forwarder config
      - "13302:13302/tcp"
    restart: "on-failure"
    networks:
      - membership-net
    volumes:
      - "graylog_data:/usr/share/graylog/data"
  #############################
  # Graylog configuration end #
  #############################
  
  ############################
  # Monitoring configuration #
  ############################  
  grafana:
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin  # Usuario por defecto
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Contraseña por defecto      
    ports:
      - "3000:3000"  # Expon el puerto 3000    
    networks:
      - membership-net
    volumes:
      - grafana_data:/var/lib/grafana  # Persistencia de datos
      - ./tools/grafana/provisioning/datasources/prometheus-datasource.yml:/etc/grafana/provisioning/datasources/prometheus-datasource.yml
    depends_on:
      - prometheus

  node_exporter:
    container_name: node_exporter
    command: '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - membership-net
  
  otel-collector:
    command: [ "--config=/etc/otel-collector-config.yml" ]
    volumes:
      - ./tools/otel/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "4317:4317"
    networks:
      - membership-net
  
  prometheus:
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - membership-net
    depends_on:
      - member-api
    volumes:
      - ./tools/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    
    ################################
    # Monitoring configuration end #
    ################################
  
  customer-api:
    container_name: customer-api
    restart: always
    environment:
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - ASPNETCORE_Kestrel__Certificates__Default__Password=5Ram?X$bre_2s*awAx@5
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetcore-dev-cert.pfx
      - ConnectionStrings__Database=Server=customerdb;Port=5432;Database=CustomerDb;User Id=postgres;Password=postgres;Include Error Detail=true
      - VAULT_TOKEN=p8ItnHqR5SXlAb8EzXaGSDqp
      - Otel__Endpoint=http://otel-collector:4317
    ports:
      - "6000:8080"
      - "6060:8081"
    networks:
      - membership-net
    depends_on:
      - memberdb
      - consul
      - graylog
      - vault
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      - ./aspnetcore-dev-cert.pfx:/https/aspnetcore-dev-cert.pfx

networks:
  membership-net:  